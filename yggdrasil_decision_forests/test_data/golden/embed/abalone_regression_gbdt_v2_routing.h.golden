#ifndef YDF_MODEL_YDF_MODEL_H_
#define YDF_MODEL_YDF_MODEL_H_

#include <stdint.h>
#include <cstring>
#include <array>
#include <algorithm>
#include <bitset>
#include <cassert>

namespace ydf_model {

enum class FeatureType : uint32_t {
  kOutOfVocabulary = 0,
  kM = 1,
  kI = 2,
  kF = 3,
};

constexpr const int kNumFeatures = 8;
constexpr const int kNumTrees = 3;

struct Instance {
  typedef float Numerical;

  FeatureType type;
  Numerical longestshell;
  Numerical diameter;
  Numerical height;
  Numerical wholeweight;
  Numerical shuckedweight;
  Numerical visceraweight;
  Numerical shellweight;
};

struct __attribute__((packed)) Node {
  uint8_t pos = 0;
  union {
    struct __attribute__((packed)) {
      uint8_t feat;
      union {
        float thr;
        uint8_t cat;
      };
    } cond;
    struct __attribute__((packed)) {
      float val;
    } leaf;
  };
};
static const Node nodes[] = {
{.pos=31,.cond={.feat=7,.thr=0.16775}},
{.pos=15,.cond={.feat=7,.thr=0.05875}},
{.pos=7,.cond={.feat=7,.thr=0.0265}},
{.pos=3,.cond={.feat=6,.thr=0.01025}},
{.pos=1,.cond={.feat=5,.thr=0.00725}},
{.leaf={.val=-0.678861}},
{.leaf={.val=-0.575641}},
{.pos=1,.cond={.feat=7,.thr=0.0175}},
{.leaf={.val=-0.541304}},
{.leaf={.val=-0.484489}},
{.pos=3,.cond={.feat=2,.thr=0.2225}},
{.pos=1,.cond={.feat=3,.thr=0.0625}},
{.leaf={.val=-0.471169}},
{.leaf={.val=-0.405056}},
{.pos=1,.cond={.feat=0,.cat=0}},
{.leaf={.val=-0.351388}},
{.leaf={.val=-0.188982}},
{.pos=7,.cond={.feat=0,.cat=4}},
{.pos=3,.cond={.feat=7,.thr=0.112}},
{.pos=1,.cond={.feat=5,.thr=0.09575}},
{.leaf={.val=-0.244246}},
{.leaf={.val=-0.295431}},
{.pos=1,.cond={.feat=5,.thr=0.217}},
{.leaf={.val=-0.117735}},
{.leaf={.val=-0.216028}},
{.pos=3,.cond={.feat=5,.thr=0.22975}},
{.pos=1,.cond={.feat=3,.thr=0.1225}},
{.leaf={.val=-0.0900595}},
{.leaf={.val=0.0376989}},
{.pos=1,.cond={.feat=6,.thr=0.1685}},
{.leaf={.val=-0.211129}},
{.leaf={.val=-0.0275789}},
{.pos=15,.cond={.feat=7,.thr=0.35975}},
{.pos=7,.cond={.feat=7,.thr=0.24925}},
{.pos=3,.cond={.feat=5,.thr=0.30025}},
{.pos=1,.cond={.feat=0,.cat=8}},
{.leaf={.val=-0.02731}},
{.leaf={.val=0.173916}},
{.pos=1,.cond={.feat=5,.thr=0.37975}},
{.leaf={.val=-0.0446622}},
{.leaf={.val=-0.111661}},
{.pos=3,.cond={.feat=5,.thr=0.39975}},
{.pos=1,.cond={.feat=5,.thr=0.34475}},
{.leaf={.val=0.334164}},
{.leaf={.val=0.184504}},
{.pos=1,.cond={.feat=7,.thr=0.29375}},
{.leaf={.val=-0.0212617}},
{.leaf={.val=0.0718944}},
{.pos=7,.cond={.feat=5,.thr=0.552}},
{.pos=3,.cond={.feat=7,.thr=0.5075}},
{.pos=1,.cond={.feat=5,.thr=0.41475}},
{.leaf={.val=0.580223}},
{.leaf={.val=0.323402}},
{.pos=1,.cond={.feat=2,.thr=0.495}},
{.leaf={.val=1.04861}},
{.leaf={.val=0.680754}},
{.pos=3,.cond={.feat=7,.thr=0.56875}},
{.pos=1,.cond={.feat=7,.thr=0.4445}},
{.leaf={.val=0.108071}},
{.leaf={.val=0.227469}},
{.pos=1,.cond={.feat=5,.thr=0.77}},
{.leaf={.val=0.705754}},
{.leaf={.val=0.312421}},
{.pos=31,.cond={.feat=7,.thr=0.16775}},
{.pos=15,.cond={.feat=7,.thr=0.05875}},
{.pos=7,.cond={.feat=7,.thr=0.0265}},
{.pos=3,.cond={.feat=6,.thr=0.01025}},
{.pos=1,.cond={.feat=2,.thr=0.1025}},
{.leaf={.val=-0.666359}},
{.leaf={.val=-0.527219}},
{.pos=1,.cond={.feat=5,.thr=0.02325}},
{.leaf={.val=-0.413043}},
{.leaf={.val=-0.466778}},
{.pos=3,.cond={.feat=2,.thr=0.2225}},
{.pos=1,.cond={.feat=5,.thr=0.058}},
{.leaf={.val=-0.364538}},
{.leaf={.val=-0.434957}},
{.pos=1,.cond={.feat=0,.cat=12}},
{.leaf={.val=-0.31625}},
{.leaf={.val=-0.170084}},
{.pos=7,.cond={.feat=0,.cat=16}},
{.pos=3,.cond={.feat=7,.thr=0.112}},
{.pos=1,.cond={.feat=7,.thr=0.06875}},
{.leaf={.val=-0.300007}},
{.leaf={.val=-0.245637}},
{.pos=1,.cond={.feat=5,.thr=0.217}},
{.leaf={.val=-0.105962}},
{.leaf={.val=-0.194425}},
{.pos=3,.cond={.feat=5,.thr=0.233}},
{.pos=1,.cond={.feat=7,.thr=0.11825}},
{.leaf={.val=-0.10375}},
{.leaf={.val=-0.00385521}},
{.pos=1,.cond={.feat=6,.thr=0.1685}},
{.leaf={.val=-0.193403}},
{.leaf={.val=-0.0248209}},
{.pos=15,.cond={.feat=7,.thr=0.37475}},
{.pos=7,.cond={.feat=7,.thr=0.24925}},
{.pos=3,.cond={.feat=5,.thr=0.24325}},
{.pos=1,.cond={.feat=4,.thr=0.61675}},
{.leaf={.val=0.09369}},
{.leaf={.val=0.481939}},
{.pos=1,.cond={.feat=5,.thr=0.30025}},
{.leaf={.val=0.0342866}},
{.leaf={.val=-0.0658736}},
{.pos=3,.cond={.feat=5,.thr=0.44375}},
{.pos=1,.cond={.feat=7,.thr=0.28975}},
{.leaf={.val=0.147129}},
{.leaf={.val=0.300157}},
{.pos=1,.cond={.feat=7,.thr=0.2905}},
{.leaf={.val=-0.0460116}},
{.leaf={.val=0.0440641}},
{.pos=7,.cond={.feat=5,.thr=0.552}},
{.pos=3,.cond={.feat=4,.thr=1.40125}},
{.pos=1,.cond={.feat=5,.thr=0.415}},
{.leaf={.val=0.626055}},
{.leaf={.val=0.295249}},
{.pos=1,.cond={.feat=3,.thr=0.1775}},
{.leaf={.val=0.443813}},
{.leaf={.val=0.777669}},
{.pos=3,.cond={.feat=7,.thr=0.69275}},
{.pos=1,.cond={.feat=7,.thr=0.4445}},
{.leaf={.val=0.104998}},
{.leaf={.val=0.2356}},
{.pos=1,.cond={.feat=2,.thr=0.5425}},
{.leaf={.val=1.07518}},
{.leaf={.val=0.604846}},
{.pos=31,.cond={.feat=7,.thr=0.15375}},
{.pos=15,.cond={.feat=7,.thr=0.0475}},
{.pos=7,.cond={.feat=7,.thr=0.02175}},
{.pos=3,.cond={.feat=4,.thr=0.02325}},
{.pos=1,.cond={.feat=2,.thr=0.1025}},
{.leaf={.val=-0.599723}},
{.leaf={.val=-0.516069}},
{.pos=1,.cond={.feat=7,.thr=0.01525}},
{.leaf={.val=-0.457507}},
{.leaf={.val=-0.415872}},
{.pos=3,.cond={.feat=7,.thr=0.0395}},
{.pos=1,.cond={.feat=6,.thr=0.01375}},
{.leaf={.val=-0.253653}},
{.leaf={.val=-0.350878}},
{.pos=1,.cond={.feat=5,.thr=0.046}},
{.leaf={.val=-0.152861}},
{.leaf={.val=-0.30408}},
{.pos=7,.cond={.feat=0,.cat=20}},
{.pos=3,.cond={.feat=7,.thr=0.112}},
{.pos=1,.cond={.feat=7,.thr=0.06875}},
{.leaf={.val=-0.26881}},
{.leaf={.val=-0.221073}},
{.pos=1,.cond={.feat=5,.thr=0.21625}},
{.leaf={.val=-0.123039}},
{.leaf={.val=-0.199929}},
{.pos=3,.cond={.feat=5,.thr=0.233}},
{.pos=1,.cond={.feat=2,.thr=0.3075}},
{.leaf={.val=-0.120292}},
{.leaf={.val=-0.0222674}},
{.pos=1,.cond={.feat=6,.thr=0.15125}},
{.leaf={.val=-0.197271}},
{.leaf={.val=-0.0838989}},
{.pos=15,.cond={.feat=7,.thr=0.3545}},
{.pos=7,.cond={.feat=7,.thr=0.2395}},
{.pos=3,.cond={.feat=5,.thr=0.23275}},
{.pos=1,.cond={.feat=4,.thr=0.57275}},
{.leaf={.val=0.0518753}},
{.leaf={.val=0.297453}},
{.pos=1,.cond={.feat=3,.thr=0.1525}},
{.leaf={.val=-0.0583499}},
{.leaf={.val=0.070624}},
{.pos=3,.cond={.feat=5,.thr=0.34475}},
{.pos=1,.cond={.feat=2,.thr=0.4275}},
{.leaf={.val=0.317869}},
{.leaf={.val=0.179296}},
{.pos=1,.cond={.feat=5,.thr=0.44375}},
{.leaf={.val=0.105116}},
{.leaf={.val=0.00736695}},
{.pos=7,.cond={.feat=5,.thr=0.552}},
{.pos=3,.cond={.feat=7,.thr=0.414}},
{.pos=1,.cond={.feat=5,.thr=0.42525}},
{.leaf={.val=0.44689}},
{.leaf={.val=0.146606}},
{.pos=1,.cond={.feat=4,.thr=1.40125}},
{.leaf={.val=0.418284}},
{.leaf={.val=0.633271}},
{.pos=3,.cond={.feat=7,.thr=0.56875}},
{.pos=1,.cond={.feat=7,.thr=0.4445}},
{.leaf={.val=0.0831095}},
{.leaf={.val=0.181162}},
{.pos=1,.cond={.feat=5,.thr=0.77}},
{.leaf={.val=0.591352}},
{.leaf={.val=0.252696}},
};

static const uint8_t condition_types[] = {1,0,0,0,0,0,0,0};


static const uint8_t root_deltas[] = {63,63,63};


static const std::bitset<24> categorical_bank {"101110110011101110110011"};

inline float Predict(const Instance& instance) {
  float accumulator {9.94246};

  const Node* root = nodes;
  const Node* node;
  const char* raw_instance = (const char*)(&instance);
  uint8_t eval;
  for (uint8_t tree_idx = 0; tree_idx != kNumTrees; tree_idx++) {
    node = root;
    while(node->pos) {
      if (condition_types[node->cond.feat] == 0) {
        float numerical_feature;
        std::memcpy(&numerical_feature, raw_instance + node->cond.feat * sizeof(float), sizeof(float));
        eval = numerical_feature >= node->cond.thr;
      } else if (condition_types[node->cond.feat] == 1) {
        uint32_t categorical_feature;
        std::memcpy(&categorical_feature, raw_instance + node->cond.feat * sizeof(uint32_t), sizeof(uint32_t));
        eval = categorical_bank[categorical_feature + node->cond.cat];
      } else {
        assert(false);
      }
      node += (node->pos & -eval) + 1;
    }
    accumulator += node->leaf.val;
    root += root_deltas[tree_idx];
  }

  return accumulator;
}

}  // namespace ydf_model
#endif
