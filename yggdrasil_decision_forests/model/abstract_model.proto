/*
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package yggdrasil_decision_forests.model.proto;

import "yggdrasil_decision_forests/dataset/weight.proto";
import "yggdrasil_decision_forests/model/hyperparameter.proto";

// Modeling task.
enum Task {
  UNDEFINED = 0;
  CLASSIFICATION = 1;
  REGRESSION = 2;

  // In case of ranking, the label is expected to be between 0 and 4, and to
  // have the NDCG semantic:
  // 0: Completely unrelated.
  // 4: Perfect match.
  RANKING = 3;

  // Predicts the incremental impact of a treatment on a categorical outcome.
  // See https://en.wikipedia.org/wiki/Uplift_modelling.
  CATEGORICAL_UPLIFT = 4;

  // Predicts the incremental impact of a treatment on a numerical outcome.
  // See https://en.wikipedia.org/wiki/Uplift_modelling.
  NUMERICAL_UPLIFT = 5;

  // Predicts if an instance is similar to the majority of the training data or
  // anomalous (a.k.a. an outlier). An anomaly detection prediction is a value
  // between 0 and 1, where 0 indicates the possible most normal instance and 1
  // indicates the most possible anomalous instance.
  ANOMALY_DETECTION = 6;
}

// Contains the same information as a model::AbstractModel (without the
// data_spec field).
message AbstractModel {
  // Name of the model. Should match one of the registered models in the
  // :model_library.
  optional string name = 1;

  // Task solved by the model e.g. classification, regression.
  optional Task task = 2;

  // Index of the label column in the dataspec.
  optional int32 label_col_idx = 3;

  // Training example weights.
  optional dataset.proto.LinkedWeightDefinition weights = 4;

  // List of indices (in the dataspec) of the model input features.
  repeated int32 input_features = 5;

  // Index of the "grouping" attribute in the dataspec for ranking problems e.g.
  // the query in a <query,document> ranking problem.
  optional int32 ranking_group_col_idx = 6 [default = -1];

  // Pre-computed variable importances (VI). The VIs of the model are composed
  // of the pre-computed VIs (this field) and the "model specific VIs" (i.e.
  // variable importance computed on the fly based on the models structure).
  map<string, VariableImportanceSet> precomputed_variable_importances = 7;

  // If true, the output of a task=CLASSIFICATION model is a probability and can
  // be used accordingly (e.g. averaged, clamped to [0,1]). If false, the output
  // of the task=CLASSIFICATION model might not be a probability.
  optional bool classification_outputs_probabilities = 8 [default = true];

  // Index of the "treatment" attribute in the dataspec for uplift problems.
  optional int32 uplift_treatment_col_idx = 9 [default = -1];

  optional Metadata metadata = 10;

  // Logs of the automated hyper-parameter tuning of the model.
  optional HyperparametersOptimizerLogs hyperparameter_optimizer_logs = 11;

  // Indicate if a model is pure for serving i.e. the model was tripped of all
  // information not required for serving.
  optional bool is_pure_model = 12 [default = false];
}

// Information about the model.
message Metadata {
  // Owner of the model. Default to the user who ran the training code if
  // available.
  optional string owner = 1;

  // Unix Timestamp of the model training. Expressed in seconds.
  optional int64 created_date = 2;

  // Unique identifier of the model.
  optional uint64 uid = 3;

  // Framework used to create the model.
  optional string framework = 4;
}

// Description of the importance of a given attribute. The semantic of
// "importance" is variable.
message VariableImportance {
  // Next ID: 3

  optional int32 attribute_idx = 1;
  optional double importance = 2;
}

message VariableImportanceSet {
  // Next ID: 2

  repeated VariableImportance variable_importances = 1;
}

message HyperparametersOptimizerLogs {
  // Optimization steps ordered chronologically by evaluation_time.
  repeated Step steps = 1;

  // Domain of search for the hyper-parameters.
  optional HyperParameterSpace space = 2;

  //  Registered key for the hyperparameter optimizer.
  optional string hyperparameter_optimizer_key = 3;

  // The selected hyperparameters and its score.
  //
  // Note: It is possible that the best hyperparameters are not part of the
  // "steps".
  optional GenericHyperParameters best_hyperparameters = 5;
  optional float best_score = 4;

  message Step {
    // Time, in seconds, relative to the start of the hyper-parameter tuning, of
    // the consuption of the hyperparameters evaluation.
    optional double evaluation_time = 1;

    // Tested hyperparameters.
    optional GenericHyperParameters hyperparameters = 2;

    // Score (the higher, the better) of the hyperparameters.
    // A NaN value indicates that the hyperparameters are unfeasible.
    optional float score = 3;
  }
}

// Proto used to serialize / deserialize the model to / from string. See
// "SerializeModel" and "DeserializeModel".
//
// This message does not contains the entire model data.
message SerializedModel {
  optional AbstractModel abstract_model = 1;

  extensions 1000 to max;
}
