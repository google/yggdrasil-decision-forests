/*
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package yggdrasil_decision_forests.model.proto;

// Generic hyper parameters of a learner.
//
// Learner hyper parameters are normally provided through the "TrainingConfig"
// proto extended by each learner. The "Generic hyper parameters" (the following
// message) is a parallel solution to specify the hyper parameters of a learner
// using a list of key-values.
//
// The "Generic hyper parameters" are designed for the interfacing with
// hyper-parameter optimization algorithms, while the "TrainingConfig" proto is
// designed for direct user input. For this reason, the generic hyper parameters
// are not guaranteed to be as expressive as the "TrainingConfig".
// However, the default values of the "Generic hyper parameters" are guaranteed
// to be equivalent to the default value of the training config.
message GenericHyperParameters {
  repeated Field fields = 1;

  // Unique id of the parameters.
  // Might be missing if the parameters are generated by a user, or by a
  // AbstractOptimizer that does not require ids.
  optional int64 id = 2;

  message Field {
    // Hyper parameter name. Should match the "name" of the hyper parameter
    // specification.
    optional string name = 1;
    optional Value value = 2;
  }

  message Value {
    // Hyper parameter value. Should match the type defined in the hyper
    // parameter specification.
    oneof Type {
      string categorical = 2;
      int32 integer = 3;
      double real = 4;
      CategoricalList categorical_list = 5;
    }

    message CategoricalList {
      repeated string values = 1;
    }
  }
}

// Definition of the type, possible values and default values of the generic
// hyper parameters of a learner. Also contains some documentation (free text +
// links).
message GenericHyperParameterSpecification {
  // Individual fields / hyper-parameters.
  // Also contains the per-fields documentation.
  map<string, Value> fields = 1;

  // Documentation for the entire learner.
  optional LearnerDocumentation documentation = 2;

  message Value {
    oneof Type {
      Categorical categorical = 2;
      Integer integer = 3;
      Real real = 4;
      CategoricalList categorical_list = 6;
    }

    optional Documentation documentation = 5;

    // If set, this parameter exists conditionally on other parameter values.
    optional Conditional conditional = 7;

    // If set, this parameter is mutually exclusive with other parameters.
    optional MutuallyExclusivityCondition mutual_exclusive = 8;

    // Categorical hyper parameter i.e. the hyper parameter takes a values
    // from a set of possible values.
    message Categorical {
      repeated string possible_values = 1;
      optional string default_value = 2;
    }

    // List of categorical values.
    message CategoricalList {}

    // Integer hyper parameter.
    message Integer {
      optional int32 minimum = 1;
      optional int32 maximum = 2;
      optional int32 default_value = 3;
    }

    // Real hyper parameter.
    message Real {
      optional double minimum = 1;
      optional double maximum = 2;
      optional double default_value = 3;
    }

    // Links to the documentation of the hyper-parameter.
    message Documentation {
      // Path to the proto relative to YDF root directory.
      optional string proto_path = 1;

      // Name of the proto field. If not specific, use "name" instead.
      optional string proto_field = 2;

      // Free text description of the parameter.
      optional string description = 3;

      // When a field is deprecated.
      optional bool deprecated = 8;
    }

    message MutuallyExclusivityCondition {
      // List of parameters this parameter is mutually exclusive with. Any
      // parameter in this list must have this parameter in its
      // `other_parameters` list.
      repeated string other_parameters = 1;
      // True if this parameter is the default parameter of a list of mutually
      // exclusive parameters.
      optional bool is_default = 2 [default = false];
    }
  }

  // Conditional existence of a parameter.
  // A parameter exist iff. the other parameter "control_field" satisfy
  // "constraint".
  message Conditional {
    // Name of the control parameter.
    optional string control_field = 1;

    // Constraint on the parent.
    oneof constraint {
      // One of the following values.
      Categorical categorical = 2;
    }

    message Categorical {
      repeated string values = 1;
    }
  }

  // Documentation about the entire learner.
  message LearnerDocumentation {
    // Free text description of the learning algorithm.
    optional string description = 1;
  }
}

// Set of hyper-parameter-sets aka. hyper-parameter search space.
message HyperParameterSpace {
  repeated Field fields = 1;

  message Field {
    // Name of the hyper parameter. Should match one of the generic hyper
    // parameter of the model (use "GetGenericHyperParameterSpecification" for
    // the list of generic hyper parameters).
    optional string name = 1;

    // Definition of the candidate values.
    oneof Type {
      DiscreteCandidates discrete_candidates = 2;
    }

    // If this field has a parent field, then it is only activated if its
    // parent's value is one of these.
    oneof MatchingParentValues {
      DiscreteCandidates parent_discrete_values = 3;
    }

    // List of child fields.
    repeated Field children = 4;
  }

  message DiscreteCandidates {
    repeated GenericHyperParameters.Value possible_values = 1;

    // If set, "weights" has the same number of elements as "possible_values".
    // "weights[i]" is the weight of this specific value for the optimizer.
    // Different optimizers can use this weight differently.
    //
    // Random optimizer: Weight of the field during random sampling. If not
    //   specified, all the hyper-parameter combinations have the same
    //   probability of sampling. It means that a possible value with
    //   conditional children will be more likely to be sampled.
    repeated double weights = 2;
  }
}
