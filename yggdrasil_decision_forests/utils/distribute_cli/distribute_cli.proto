/*
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package yggdrasil_decision_forests.utils.distribute_cli.proto;

import "yggdrasil_decision_forests/utils/distribute/distribute.proto";

message Config {
  // If true, skips the commands that were already run successfully.
  // If false and if the manager process restarts, commands will be re-executed.
  optional bool skip_already_run_commands = 1 [default = true];

  // Number of commands that a single worker can execute in parallel.
  optional int32 parallel_execution_per_worker = 2 [default = 1];

  optional distribute.proto.Config distribute_config = 3;

  // If true, the workers print information about starting and stopping
  // commands.
  optional bool display_worker_output = 4 [default = true];

  // If true, command outputs are displayed by the worker. If false, the command
  // outputs are only exported to the log file.
  optional bool display_commands_output = 6 [default = false];

  // For remote distributed execution, using display_worker_output=true and
  // display_commands_output=false generally works well. For local execution,
  // using display_worker_output=false and display_commands_output=false
  // generally works well. For local exeuction of a single task at a time (e.g.
  // for debugging), using display_worker_output=true and
  // display_commands_output=true generally works well.

  // If true, the commands are executed in random order when "WaitCompletion"
  // is called. This can help distributing the charde among the workers is
  // parallel_execution_per_worker>1. If false, the commands are started in
  // order when they are scheduled (with "Schedule").
  optional bool shuffle_commands = 5 [default = true];

  // If false, a same command can be executed multiple times in different
  // "WaitCompletion" blocks. If true, a same command cannot be executed
  // multiple time.
  optional bool can_repeat_command = 7 [default = false];
}

message Welcome {
  optional string log_dir = 1;
  optional bool display_output = 2;
  optional bool display_commands_output = 3;
}

message Request {
  optional string request_id = 1;

  oneof type {
    Command command = 2;
  }

  message Command {
    optional string command = 1;

    // Unique identifier of the command. Computed with the "CommandToCommandId"
    // function in "common.h".
    optional string internal_command_id = 2;
  }
}

message Result {
  optional string request_id = 1;

  oneof type {
    Command command = 2;
  }

  // Duration of the execution of the command in seconds.
  optional double duration = 3;
  // Execution worker.
  optional int32 worker = 4;

  message Command {
    optional string internal_command_id = 1;
  }
}
